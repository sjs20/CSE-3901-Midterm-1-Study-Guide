1. $ vi a
   $ git add .
   $ git commit -m "a"
   $ vi b
   $ git add .
   $ git commit -m "b"
   $ vi c
   $ git add .
   $ git commit -m "c"
   $ vi d
   $ git add .
   $ git commit -m "d"
   $ vi e
   $ git add .
   $ git commit -m "e"
   $ git checkout <Commit b's Hash>
   $ vi f 
   $ git add .
   $ git commit -m "f"
   $ git branch maint
   $ git checkout main
   $ git merge maint

2. =begin
   ('a'..'z') is an end-inclusive range of lowercase letters
   to_a converts the range into an array
   sample(8) selects 8 unique random elements from the array
   join converts the array into a single string
   =end
   def generate_random_sequence
     ('a'..'z').to_a.sample(8).join
   end

   puts "A random sequence of 8 lowercase letters: #{generate_random_sequence}"

3. # Reads the names from stdin and puts them in an array
   def read_names
     puts "Please enter a list of names (type 'done' when finished): "
     names = []
     while true
       name = gets.chomp                   # Read the keyboard input
       break if name.downcase == 'done'    # Exit loop if 'done' was entered
       names << name                       # Place each name in the array
     end
     return names
   end

   # Changes the names to all caps and sorts them alphabetically
   def sort_names(names)
     names.map(&:upcase).sort              # Capitalizes each element in the array and sorts the values
   end

   names = read_names
   sorted_names = sort_names(names)
   puts "Sorted names in all caps: "
   sorted_names.each { |name| puts name }  # Print each name in the array

4. # This is method one:
   text = 'a#asg#sdfg#d##'                     # Assign text a random string
   print "String = #{text}\n"                  # Print the given string
   result = []                                 # Initialize result, this will be the array of indices where '#' occurs
   index = 0                                   # Start index at first array index
   while index < text.length do                # Loops through the entire string
     result << index if text[index] == '#'     # Push the index number into the array if the character is '#'
     index += 1                                # Increment the index each loop to travserse the string
   end
   print "Result = #{result}\n"                # Print the array of indices

   puts"-------------------------------"       # Prints a line of dashes

   # This is method two:
   text = 'a#asg#sdfg#d#'                      # Assign text a random string
   print "String = #{text}\n"                  # Print the given string
   result = []                                 # Initialize result, tis will be the array of indices where '#' occurs
   text.chars.each_with_index do |char, index| # Converts text into array of chars, and iterates over that array
     result << index if char == '#'            # Pushes the index of each char that is a '#'
   end
   print "Result = #{result}\n"                # Print the array of indices

5. def even_squared(int_array)
   result = []
   index = 0
     while index < int_array.length do                                                     # Iterate through the length of the array
       result << (int_array[index] * int_array[index]) if int_array[index] % 2 == 0        # Push the squared number into the array if it is divisible by 2
       index += 1
     end
     result
   end

   int_array = [1,2,3,7,7,1,4,5,6,2]
   puts "Array given: #{int_array}"
   result = even_squared(int_array)
   puts "Array after: #{result}"

6. def remove_ints(list)
   numbers = list.select {|item|item.is_a?Integer}     # Select all the top level integers from list and copy them to nubmers array
   result = list.each do |array|                       # Iterate through each element in list as the variable array
       if array.is_a?Array then                          # If the element is an array, then iterate through that array
           array.delete_if do |element|                  # delete_if is an enumerator method that iterates over each element in an array
               numbers.include?element                   # If numbers contains the element in the array, it is deleted
           end
       end
   end
   return result
   end

   list = [3, 5, [4,5,9], 1, [1,2,3,8,9]]
   puts "The given array: #{list}"
   result = remove_ints(list)
   puts "The array after: #{result}"

7. def count_occurences(strings)
   frequency = Hash.new(0)   # Creates a hash with a default value of zero for each key
   strings.each do |word|    # Iterate over each item in strings as variable word
      frequency[word] += 1    # Increment the word's hash if it appears
   end
      return frequency
   end

   strings = ["car", "van", "car", "car"]
   puts "The given array: #{strings}"
   result = count_occurences(strings)
   puts "The result: #{result}"

8. def is_valid?(phone_number)
   format = /^\d{3}-\d{3}-\d{4}$/    # Regular expression for phone number format
   =begin
   ^ asserts the position at the start of the string
   \d{3} matches exactly any 3 digits
   - matches the literal hyphen character
   $ asserts the position at the end of the string
   =end
     if phone_number.match(format)     # If the phone number matches the regular expression, return true
       return true
     else
       return false                    # If the number does not match, return false
     end
   end

   phone_numbers = ["740-516-7737", "7405167737", "74-516-7737"]
   puts "Phone Numbers to test: #{phone_numbers}"

   phone_numbers.each do |number|
     if is_valid?(number)
       puts "#{number} is a valid phone number"
     else
       puts "#{number} is NOT a valid phone number"
     end
   end

9. class Person
      attr_accessor :name, :id, :age, :email    # Defines both the getter and setter methods

      def initialize(name, id, age, email)      # Set up the initial state of the object
         @name = name
         @id = id
         @age = age
         @email = email
      end

      def toString                              # Displays the information in the instance variable
         "Name: #{@name}, ID: #{@id}, Age: #{@age}, Email: #{@email}"
      end
   end

   class Student < Person                      # Student is a subclass of Person and inherits attributes and methods from Person
      attr_accessor :marks, :major              # Defines both the getter and setter methods

     def initialize(name, id, age, email, marks, major)
       super(name, id, age, email)             # Call the initialize method of the parent class
       @marks = marks
       @major = major
     end

      def toString
         super + ", Marks: #{@marks.inspect}, Major: #{@major}"
      end
   end

   # Creates a new Person object
   person = Person.new("Alice", '2', '21', "alice.2@osu.edu")

   # Converts the object to string
   puts person.toString 
